Compiling the programs on a Raspberry Pi Zero.

In the video, Andy used a Raspberry Pi 4 to compile all of the C programs, and then uploaded them to the Pi Pico.

Currently, I do not have a Raspberry Pi 4, but I do have a Pi Zero (2nd generation). Seeing as the steps were relatively the same, I
decided to try to see if it would also compile on my Raspberry Pi Zero. After a lot of trial and error, I figured it out. Here are the steps I took
to compile the C programs on a Raspberry Pi Zero.

Step 0: Like in the video, make sure you run the pico install script to setup your environment.

Step 1: Compile and upload the example blink program to the Pi Pico to make sure you are able to compile and upload C programs.

Step 2: under the src folder, there are 3 sub-folders: gb_vga, nes-controller-gb, and nes-controller. Go inside one of the three directories.
The following steps are the same for all 3 programs.

Step 3: Make a new build directory under the folder you are currently in. Example: if your working directory is gb_vga, type "mkdir build"

Step 4: change into the new build directory

Step 5: open the C program in a text editor of choice, and check if the references point to the specific folder on your instance; for me
the pico installation was in /home/pi/pico, so double-check to make sure (do the same for the CMakeLists.txt in the parent directory)

Step 6: while still in the build folder, run "cmake .."

NOTE: if you get errors at this stage, delete the build folder, and restart from Step 3 (sudo rm -fR build, from the parent directory)

Step 7: once that finishes run the "make" command, with no options

Step 8: upload the code to the Pico, either using Raspbian, or through the command line; I will show steps that I used from the command line (in the 
Pico SDK documentation)



Uploading the code to the Pico via the command line:

dmesg | tail
sudo mkdir -p /mnt/pico
sudo mount /dev/sda1 /mnt/pico (check the output of dmesg | tail to see what the Pico is mounted as)
ls /mnt/pico/
sudo cp blink.uf2 /mnt/pico (whatever the program name is, in uf2 format)
sudo sync
sudo umount /mnt/pico

To check if the program uploaded correctly, remount the Pico holding the Bootsel button while plugging it into the Pi Zero (as shown in the video), then
run sudo picotool info -a (Note: you might have to install the picotool, instructions in Appendix B of the SDK documentation)

You should see similar output to what I got below:



 name:          gb_vga
 features:      UART stdin / stdout
 binary start:  0x10000000
 binary end:    0x10006008

Fixed Pin Information
 0:      Red 0-5, UART0 TX
 1:      Red 0-5, UART0 RX
 2-4:    Red 0-5
 6-10:   Green 0-5
 11-15:  Blue 0-5
 16:     HSync
 17:     VSync

Build Information
 sdk version:       1.3.0
 pico_board:        pico
 boot2_name:        boot2_w25q080
 build date:        Jan 18 2022
 build attributes:  Release

Device Information
 flash size:   2048K
 ROM version:  2


================================================================
Program Information
 name:          nes-controller
 binary start:  0x10000000
 binary end:    0x10002668

Fixed Pin Information
 none

Build Information
 sdk version:       1.3.0
 pico_board:        pico
 boot2_name:        boot2_w25q080
 build date:        Jan 18 2022
 build attributes:  Release

Device Information
 flash size:   2048K
 ROM version:  2



================================================================

Program Information
 name:          nes-controller-gb
 features:      UART stdin / stdout
 binary start:  0x10000000
 binary end:    0x10002ab8

Fixed Pin Information
 0:  UART0 TX
 1:  UART0 RX

Build Information
 sdk version:       1.3.0
 pico_board:        pico
 boot2_name:        boot2_w25q080
 build date:        Jan 18 2022
 build attributes:  Release

Device Information
 flash size:   2048K
 ROM version:  2

